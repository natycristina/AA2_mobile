// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_projects/test/respository/user_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_projects/database/app_database.dart' as _i3;
import 'package:flutter_projects/models/job.dart' as _i6;
import 'package:flutter_projects/models/user.dart' as _i5;
import 'package:flutter_projects/services/user_api_service.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences_platform_interface/types.dart' as _i8;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i3.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<_i5.User?> getUserByEmail(String? email) => (super.noSuchMethod(
        Invocation.method(
          #getUserByEmail,
          [email],
        ),
        returnValue: _i4.Future<_i5.User?>.value(),
      ) as _i4.Future<_i5.User?>);

  @override
  _i4.Future<_i5.User?> getUserByEmailAndSenha(
    String? email,
    String? passwordHash,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserByEmailAndSenha,
          [
            email,
            passwordHash,
          ],
        ),
        returnValue: _i4.Future<_i5.User?>.value(),
      ) as _i4.Future<_i5.User?>);

  @override
  _i4.Future<int> insertUser(_i5.User? user) => (super.noSuchMethod(
        Invocation.method(
          #insertUser,
          [user],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Job>> getJobs() => (super.noSuchMethod(
        Invocation.method(
          #getJobs,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Job>>.value(<_i6.Job>[]),
      ) as _i4.Future<List<_i6.Job>>);

  @override
  _i4.Future<int> insertJob(_i6.Job? job) => (super.noSuchMethod(
        Invocation.method(
          #insertJob,
          [job],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<_i6.Job?> getJobById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getJobById,
          [id],
        ),
        returnValue: _i4.Future<_i6.Job?>.value(),
      ) as _i4.Future<_i6.Job?>);

  @override
  _i4.Future<int> applyToJob(
    String? userEmail,
    int? jobId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #applyToJob,
          [
            userEmail,
            jobId,
          ],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Job>> getAppliedJobsForUser(String? userEmail) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppliedJobsForUser,
          [userEmail],
        ),
        returnValue: _i4.Future<List<_i6.Job>>.value(<_i6.Job>[]),
      ) as _i4.Future<List<_i6.Job>>);

  @override
  _i4.Future<void> insertUserJob(
    String? email,
    int? jobId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertUserJob,
          [
            email,
            jobId,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [UserApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserApiService extends _i1.Mock implements _i7.UserApiService {
  MockUserApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.User?> registerUser(
    String? name,
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [
            name,
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i5.User?>.value(),
      ) as _i4.Future<_i5.User?>);

  @override
  _i4.Future<_i5.User?> loginUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i5.User?>.value(),
      ) as _i4.Future<_i5.User?>);
}

/// A class which mocks [SharedPreferencesOptions].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockSharedPreferencesOptions extends _i1.Mock
    implements _i8.SharedPreferencesOptions {
  MockSharedPreferencesOptions() {
    _i1.throwOnMissingStub(this);
  }
}
